{
  "api_definition": {
    "id": "6491818fd13bcc000196ef22",
    "name": "Dashboard Access",
    "slug": "DashboardAccess",
    "listen_port": 0,
    "protocol": "",
    "enable_proxy_protocol": false,
    "api_id": "99706e6855d24e547ae2b97b57ddd7db",
    "org_id": "647f46b4d13bcc0001572f59",
    "use_keyless": true,
    "use_oauth2": false,
    "use_openid": false,
    "openid_options": {
      "providers": [],
      "segregate_by_client": false
    },
    "oauth_meta": {
      "allowed_access_types": [],
      "allowed_authorize_types": [],
      "auth_login_redirect": ""
    },
    "auth": {
      "name": "",
      "use_param": false,
      "param_name": "",
      "use_cookie": false,
      "cookie_name": "",
      "disable_header": false,
      "auth_header_name": "Authorization",
      "use_certificate": false,
      "validate_signature": false,
      "signature": {
        "algorithm": "",
        "header": "",
        "use_param": false,
        "param_name": "",
        "secret": "",
        "allowed_clock_skew": 0,
        "error_code": 0,
        "error_message": ""
      }
    },
    "auth_configs": {
      "authToken": {
        "name": "",
        "use_param": false,
        "param_name": "",
        "use_cookie": false,
        "cookie_name": "",
        "disable_header": false,
        "auth_header_name": "Authorization",
        "use_certificate": false,
        "validate_signature": false,
        "signature": {
          "algorithm": "",
          "header": "",
          "use_param": false,
          "param_name": "",
          "secret": "",
          "allowed_clock_skew": 0,
          "error_code": 0,
          "error_message": ""
        }
      },
      "basic": {
        "name": "",
        "use_param": false,
        "param_name": "",
        "use_cookie": false,
        "cookie_name": "",
        "disable_header": false,
        "auth_header_name": "Authorization",
        "use_certificate": false,
        "validate_signature": false,
        "signature": {
          "algorithm": "",
          "header": "",
          "use_param": false,
          "param_name": "",
          "secret": "",
          "allowed_clock_skew": 0,
          "error_code": 0,
          "error_message": ""
        }
      },
      "coprocess": {
        "name": "",
        "use_param": false,
        "param_name": "",
        "use_cookie": false,
        "cookie_name": "",
        "disable_header": false,
        "auth_header_name": "Authorization",
        "use_certificate": false,
        "validate_signature": false,
        "signature": {
          "algorithm": "",
          "header": "",
          "use_param": false,
          "param_name": "",
          "secret": "",
          "allowed_clock_skew": 0,
          "error_code": 0,
          "error_message": ""
        }
      },
      "hmac": {
        "name": "",
        "use_param": false,
        "param_name": "",
        "use_cookie": false,
        "cookie_name": "",
        "disable_header": false,
        "auth_header_name": "Authorization",
        "use_certificate": false,
        "validate_signature": false,
        "signature": {
          "algorithm": "",
          "header": "",
          "use_param": false,
          "param_name": "",
          "secret": "",
          "allowed_clock_skew": 0,
          "error_code": 0,
          "error_message": ""
        }
      },
      "jwt": {
        "name": "",
        "use_param": false,
        "param_name": "",
        "use_cookie": false,
        "cookie_name": "",
        "disable_header": false,
        "auth_header_name": "Authorization",
        "use_certificate": false,
        "validate_signature": false,
        "signature": {
          "algorithm": "",
          "header": "",
          "use_param": false,
          "param_name": "",
          "secret": "",
          "allowed_clock_skew": 0,
          "error_code": 0,
          "error_message": ""
        }
      },
      "oauth": {
        "name": "",
        "use_param": false,
        "param_name": "",
        "use_cookie": false,
        "cookie_name": "",
        "disable_header": false,
        "auth_header_name": "Authorization",
        "use_certificate": false,
        "validate_signature": false,
        "signature": {
          "algorithm": "",
          "header": "",
          "use_param": false,
          "param_name": "",
          "secret": "",
          "allowed_clock_skew": 0,
          "error_code": 0,
          "error_message": ""
        }
      },
      "oidc": {
        "name": "",
        "use_param": false,
        "param_name": "",
        "use_cookie": false,
        "cookie_name": "",
        "disable_header": false,
        "auth_header_name": "Authorization",
        "use_certificate": false,
        "validate_signature": false,
        "signature": {
          "algorithm": "",
          "header": "",
          "use_param": false,
          "param_name": "",
          "secret": "",
          "allowed_clock_skew": 0,
          "error_code": 0,
          "error_message": ""
        }
      }
    },
    "use_basic_auth": false,
    "basic_auth": {
      "disable_caching": false,
      "cache_ttl": 0,
      "extract_from_body": false,
      "body_user_regexp": "",
      "body_password_regexp": ""
    },
    "use_mutual_tls_auth": false,
    "client_certificates": [],
    "upstream_certificates": {},
    "pinned_public_keys": {},
    "enable_jwt": false,
    "use_standard_auth": false,
    "use_go_plugin_auth": false,
    "enable_coprocess_auth": false,
    "custom_plugin_auth_enabled": false,
    "jwt_signing_method": "",
    "jwt_source": "",
    "jwt_identity_base_field": "",
    "jwt_client_base_field": "",
    "jwt_policy_field_name": "",
    "jwt_default_policies": [],
    "jwt_issued_at_validation_skew": 0,
    "jwt_expires_at_validation_skew": 0,
    "jwt_not_before_validation_skew": 0,
    "jwt_skip_kid": false,
    "jwt_scope_to_policy_mapping": {},
    "jwt_scope_claim_name": "",
    "notifications": {
      "shared_secret": "",
      "oauth_on_keychange_url": ""
    },
    "enable_signature_checking": false,
    "hmac_allowed_clock_skew": -1,
    "hmac_allowed_algorithms": [],
    "request_signing": {
      "is_enabled": false,
      "secret": "",
      "key_id": "",
      "algorithm": "",
      "header_list": [],
      "certificate_id": "",
      "signature_header": ""
    },
    "base_identity_provided_by": "",
    "definition": {
      "enabled": false,
      "name": "",
      "default": "",
      "location": "header",
      "key": "x-api-version",
      "strip_path": false,
      "strip_versioning_data": false,
      "versions": {}
    },
    "version_data": {
      "not_versioned": true,
      "default_version": "",
      "versions": {
        "Default": {
          "name": "Default",
          "expires": "",
          "paths": {
            "ignored": [],
            "white_list": [],
            "black_list": []
          },
          "use_extended_paths": true,
          "extended_paths": {
            "persist_graphql": []
          },
          "global_headers": {},
          "global_headers_remove": [],
          "global_response_headers": {},
          "global_response_headers_remove": [],
          "ignore_endpoint_case": false,
          "global_size_limit": 0,
          "override_target": ""
        }
      }
    },
    "uptime_tests": {
      "check_list": [],
      "config": {
        "expire_utime_after": 0,
        "service_discovery": {
          "use_discovery_service": false,
          "query_endpoint": "",
          "use_nested_query": false,
          "parent_data_path": "",
          "data_path": "",
          "port_data_path": "",
          "target_path": "",
          "use_target_list": false,
          "cache_timeout": 60,
          "endpoint_returns_list": false
        },
        "recheck_wait": 0
      }
    },
    "proxy": {
      "preserve_host_header": false,
      "listen_path": "/dashboard_access/",
      "target_url": "",
      "disable_strip_slash": true,
      "strip_listen_path": true,
      "enable_load_balancing": false,
      "target_list": [],
      "check_host_against_uptime_tests": false,
      "service_discovery": {
        "use_discovery_service": false,
        "query_endpoint": "",
        "use_nested_query": false,
        "parent_data_path": "",
        "data_path": "",
        "port_data_path": "",
        "target_path": "",
        "use_target_list": false,
        "cache_timeout": 0,
        "endpoint_returns_list": false
      },
      "transport": {
        "ssl_insecure_skip_verify": false,
        "ssl_ciphers": [],
        "ssl_min_version": 0,
        "ssl_max_version": 0,
        "ssl_force_common_name_check": false,
        "proxy_url": ""
      }
    },
    "disable_rate_limit": false,
    "disable_quota": false,
    "custom_middleware": {
      "pre": [],
      "post": [],
      "post_key_auth": [],
      "auth_check": {
        "disabled": false,
        "name": "",
        "path": "",
        "require_session": false,
        "raw_body_only": false
      },
      "response": [],
      "driver": "",
      "id_extractor": {
        "disabled": false,
        "extract_from": "",
        "extract_with": "",
        "extractor_config": {}
      }
    },
    "custom_middleware_bundle": "",
    "custom_middleware_bundle_disabled": false,
    "cache_options": {
      "cache_timeout": 60,
      "enable_cache": false,
      "cache_all_safe_requests": false,
      "cache_response_codes": [],
      "enable_upstream_cache_control": false,
      "cache_control_ttl_header": "",
      "cache_by_headers": []
    },
    "session_lifetime": 0,
    "active": true,
    "internal": false,
    "auth_provider": {
      "name": "",
      "storage_engine": "",
      "meta": {}
    },
    "session_provider": {
      "name": "",
      "storage_engine": "",
      "meta": {}
    },
    "event_handlers": {
      "events": {}
    },
    "enable_batch_request_support": false,
    "enable_ip_whitelisting": false,
    "allowed_ips": [],
    "enable_ip_blacklisting": false,
    "blacklisted_ips": [],
    "dont_set_quota_on_create": false,
    "expire_analytics_after": 0,
    "response_processors": [],
    "CORS": {
      "enable": false,
      "allowed_origins": [
        "*"
      ],
      "allowed_methods": [
        "GET",
        "POST",
        "HEAD"
      ],
      "allowed_headers": [
        "Origin",
        "Accept",
        "Content-Type",
        "X-Requested-With",
        "Authorization"
      ],
      "exposed_headers": [],
      "allow_credentials": false,
      "max_age": 24,
      "options_passthrough": false,
      "debug": false
    },
    "domain": "",
    "certificates": [],
    "do_not_track": false,
    "enable_context_vars": false,
    "config_data": {},
    "config_data_disabled": false,
    "tag_headers": [],
    "global_rate_limit": {
      "rate": 0,
      "per": 0
    },
    "strip_auth_data": false,
    "enable_detailed_recording": false,
    "graphql": {
      "enabled": true,
      "execution_mode": "executionEngine",
      "version": "2",
      "schema": "type Query {\n  apis(query: ApisQuery!): ApisResult!\n  # get list of api definitions\n\n  api(id: String!): ApiResult!\n  # get api by ID\n\n  policies(query: PoliciesQuery!): PoliciesResult!\n  # search policies\n\n  policy(id: String!): PolicyResult!\n  # get policy by id\n\n  certs(page: Int! = 1): CertsResult!\n  # get list of certificates details\n\n  keys(page: Int! = 1 query: String): KeysResult!\n  \n  key(query: KeyQuery!): KeyResult!\n}\n\ntype Mutation {\n  create_policy(policy: PolicyInput!): RequestResult!\n  #create policy\n\n  update_policy(id: String!policy: PolicyInput!): RequestResult!\n  #update policy\n\n  delete_policy(id: String!): RequestResult!\n  #delete policy\n\n  keys_preview(key: KeyInput!): KeyResult!\n  #key preview\n\n  keys_create(key: KeyInput!basic_auth: Boolean): KeyResult!\n  #create key\n\n  keys_update(query: KeyQuery!key: KeyInput!): KeyResult!\n  #update key\n\n  keys_delete(query: KeyQuery!): RequestResult!\n  #delete key\n}\n\n###############\n# Input Qureies\n###############\ninput KeyQuery {\n  default: String\n}\n\ninput KeyInput {\n  default: String\n}\n\ninput PoliciesQuery {\n  default: String\n}\n\ninput PolicyInput {\n  default: String\n}\n\ninput ApisQuery {\n  name: String\n  #param to search api by it's name\n\n  auth_type: String\n  #param to filter by comma separated auth type list\n\n  category: String\n  #param to filter by comma separated category list\n\n  api_type: ApiType\n  #param to filter by api type\n\n  sort: String\n  #param to sort results. allowed fields: created_at allowed values: +created_at, -created_at\n\n  page: Int! = 1\n  #param to request specific page of results\n}\n\ninput ApiType {\n  rest: String\n  tcp: String\n  graphql: String\n  udg: String\n  subgraph: String\n  supergraph: String\n  internal: String\n}\n\n################\n# Output Results\n################\ntype KeysResult {\n  default: String\n}\n\ntype KeyResult {\n  KeysDetailed: KeysDetailed\n  RequestResult: RequestResult\n}\n\ntype CertsResult {\n  default: String\n}\n\ntype PoliciesResult {\n  default: String\n}\n\n\ntype PolicyResult {\n  default: String\n}\n\ntype ApisResult {\n  default: String\n}\n\ntype ApiResult {\n  default: String\n}\n\ntype RequestResult {\n  default: String\n}\n\ntype KeysDetailed {\n  keys: [KeyData!]\n  pages: Int\n}\n\ntype KeyData {\n  data: KeyData_data\n  key_hash: String\n  key_id: String\n  schemaPath: String\n}\n\n\n\ntype KeyData_data {\n  access_rights_array: [AccessDefinition!]\n  alias: String\n  allowance: Float\n  apply_policies: [String!]\n  apply_policies_data: [Policy]\n  basic_auth_data: KeyData_data_basic_auth_data\n  certificate: String\n  certificate_meta: CertificateMeta\n  data_expires: Int\n  date_created: String\n  enable_detailed_recording: Boolean\n  expires: Int\n  hmac_enabled: Boolean\n  hmac_string: String\n  id_extractor_deadline: Int\n  is_inactive: Boolean\n  jwt_data: KeyData_data_jwt_data\n  keyHash: String\n  #Used to store token hash\n\n  last_check: Int\n  last_updated: String\n  max_query_depth: Int\n  meta_data: JSON\n  monitor: KeyData_data_monitor\n  oauth_client_id: String\n  oauth_keys_array: [KeyValue]\n  org_id: String\n  per: Float\n  quota_max: Int\n  quota_remaining: Int\n  quota_renewal_rate: Int\n  quota_renews: Int\n  rate: Float\n  session_lifetime: Int\n  tags: [String!]\n  throttle_interval: Float\n  throttle_retry_limit: Int\n}\n\ntype Policy{\n  default: String\n}\n\ntype AccessDefinition{\n  default: String\n}\n\ntype KeyValue{\n  default: String\n}\n\ntype KeyData_data_monitor{\n  default: String\n}\n\ntype KeyData_data_jwt_data{\n  default: String\n}\n\ntype KeyData_data_basic_auth_data{\n  default: String\n}\n\ntype CertificateMeta{\n  default: String\n}\n\ntype JSON{\n  default: String\n}",
      "last_schema_update": "2023-06-20T11:31:14.8Z",
      "type_field_configurations": [],
      "playground": {
        "enabled": true,
        "path": "/playground"
      },
      "engine": {
        "field_configs": [],
        "data_sources": []
      },
      "proxy": {
        "auth_headers": {},
        "request_headers": null
      },
      "subgraph": {
        "sdl": ""
      },
      "supergraph": {
        "subgraphs": [],
        "merged_sdl": "",
        "global_headers": {},
        "disable_query_batching": false
      }
    },
    "tags": [],
    "scopes": {
      "jwt": {},
      "oidc": {}
    },
    "analytics_plugin": {},
    "external_oauth": {
      "enabled": false,
      "providers": []
    }
  },
  "hook_references": [],
  "is_site": false,
  "sort_by": 0,
  "user_group_owners": [],
  "user_owners": []
}