{
  "api_definition": {
    "id": "649d765cd13bcc0001758316",
    "name": "Swagger Petstore",
    "slug": "",
    "listen_port": 0,
    "protocol": "",
    "enable_proxy_protocol": false,
    "api_id": "72a21831f0d74eb651a77cae4a880ab2",
    "org_id": "647f46b4d13bcc0001572f59",
    "use_keyless": true,
    "use_oauth2": false,
    "use_openid": false,
    "openid_options": {
      "providers": [],
      "segregate_by_client": false
    },
    "oauth_meta": {
      "allowed_access_types": [],
      "allowed_authorize_types": [],
      "auth_login_redirect": ""
    },
    "auth": {
      "name": "",
      "use_param": false,
      "param_name": "",
      "use_cookie": false,
      "cookie_name": "",
      "disable_header": false,
      "auth_header_name": "",
      "use_certificate": false,
      "validate_signature": false,
      "signature": {
        "algorithm": "",
        "header": "",
        "use_param": false,
        "param_name": "",
        "secret": "",
        "allowed_clock_skew": 0,
        "error_code": 0,
        "error_message": ""
      }
    },
    "auth_configs": {},
    "use_basic_auth": false,
    "basic_auth": {
      "disable_caching": false,
      "cache_ttl": 0,
      "extract_from_body": false,
      "body_user_regexp": "",
      "body_password_regexp": ""
    },
    "use_mutual_tls_auth": false,
    "client_certificates": [],
    "upstream_certificates": {},
    "upstream_certificates_disabled": true,
    "pinned_public_keys": {},
    "certificate_pinning_disabled": true,
    "enable_jwt": false,
    "use_standard_auth": false,
    "use_go_plugin_auth": false,
    "enable_coprocess_auth": false,
    "custom_plugin_auth_enabled": false,
    "jwt_signing_method": "",
    "jwt_source": "",
    "jwt_identity_base_field": "",
    "jwt_client_base_field": "",
    "jwt_policy_field_name": "",
    "jwt_default_policies": [],
    "jwt_issued_at_validation_skew": 0,
    "jwt_expires_at_validation_skew": 0,
    "jwt_not_before_validation_skew": 0,
    "jwt_skip_kid": false,
    "jwt_scope_to_policy_mapping": {},
    "jwt_scope_claim_name": "",
    "notifications": {
      "shared_secret": "",
      "oauth_on_keychange_url": ""
    },
    "enable_signature_checking": false,
    "hmac_allowed_clock_skew": 0,
    "hmac_allowed_algorithms": [],
    "request_signing": {
      "is_enabled": false,
      "secret": "",
      "key_id": "",
      "algorithm": "",
      "header_list": [],
      "certificate_id": "",
      "signature_header": ""
    },
    "base_identity_provided_by": "",
    "definition": {
      "enabled": false,
      "name": "",
      "default": "",
      "location": "",
      "key": "",
      "strip_path": false,
      "strip_versioning_data": false,
      "versions": {}
    },
    "version_data": {
      "not_versioned": true,
      "default_version": "",
      "versions": {
        "": {
          "name": "",
          "expires": "",
          "paths": {
            "ignored": [],
            "white_list": [],
            "black_list": []
          },
          "use_extended_paths": true,
          "extended_paths": {
            "persist_graphql": []
          },
          "global_headers": {},
          "global_headers_remove": [],
          "global_response_headers": {},
          "global_response_headers_remove": [],
          "ignore_endpoint_case": false,
          "global_size_limit": 0,
          "override_target": ""
        }
      }
    },
    "uptime_tests": {
      "check_list": [],
      "config": {
        "expire_utime_after": 0,
        "service_discovery": {
          "use_discovery_service": false,
          "query_endpoint": "",
          "use_nested_query": false,
          "parent_data_path": "",
          "data_path": "",
          "port_data_path": "",
          "target_path": "",
          "use_target_list": false,
          "cache_timeout": 0,
          "endpoint_returns_list": false
        },
        "recheck_wait": 0
      }
    },
    "proxy": {
      "preserve_host_header": false,
      "listen_path": "/swagger_petstore",
      "target_url": "http://petstore.swagger.io/v2",
      "disable_strip_slash": false,
      "strip_listen_path": true,
      "enable_load_balancing": false,
      "target_list": [],
      "check_host_against_uptime_tests": false,
      "service_discovery": {
        "use_discovery_service": false,
        "query_endpoint": "",
        "use_nested_query": false,
        "parent_data_path": "",
        "data_path": "",
        "port_data_path": "",
        "target_path": "",
        "use_target_list": false,
        "cache_timeout": 0,
        "endpoint_returns_list": false
      },
      "transport": {
        "ssl_insecure_skip_verify": false,
        "ssl_ciphers": [],
        "ssl_min_version": 0,
        "ssl_max_version": 0,
        "ssl_force_common_name_check": false,
        "proxy_url": ""
      }
    },
    "disable_rate_limit": false,
    "disable_quota": false,
    "custom_middleware": {
      "pre": [],
      "post": [],
      "post_key_auth": [],
      "auth_check": {
        "disabled": false,
        "name": "",
        "path": "",
        "require_session": false,
        "raw_body_only": false
      },
      "response": [],
      "driver": "",
      "id_extractor": {
        "disabled": false,
        "extract_from": "",
        "extract_with": "",
        "extractor_config": {}
      }
    },
    "custom_middleware_bundle": "",
    "custom_middleware_bundle_disabled": false,
    "cache_options": {
      "cache_timeout": 0,
      "enable_cache": false,
      "cache_all_safe_requests": false,
      "cache_response_codes": [],
      "enable_upstream_cache_control": false,
      "cache_control_ttl_header": "",
      "cache_by_headers": []
    },
    "session_lifetime": 0,
    "active": true,
    "internal": false,
    "auth_provider": {
      "name": "",
      "storage_engine": "",
      "meta": {}
    },
    "session_provider": {
      "name": "",
      "storage_engine": "",
      "meta": {}
    },
    "event_handlers": {
      "events": {}
    },
    "enable_batch_request_support": false,
    "enable_ip_whitelisting": false,
    "allowed_ips": [],
    "enable_ip_blacklisting": false,
    "blacklisted_ips": [],
    "dont_set_quota_on_create": false,
    "expire_analytics_after": 0,
    "response_processors": [],
    "CORS": {
      "enable": false,
      "allowed_origins": [],
      "allowed_methods": [],
      "allowed_headers": [],
      "exposed_headers": [],
      "allow_credentials": false,
      "max_age": 0,
      "options_passthrough": false,
      "debug": false
    },
    "domain": "",
    "certificates": [],
    "do_not_track": false,
    "enable_context_vars": false,
    "config_data": {},
    "config_data_disabled": false,
    "tag_headers": [],
    "global_rate_limit": {
      "rate": 0,
      "per": 0
    },
    "strip_auth_data": false,
    "enable_detailed_recording": false,
    "graphql": {
      "enabled": false,
      "execution_mode": "",
      "version": "",
      "schema": "",
      "type_field_configurations": [],
      "playground": {
        "enabled": false,
        "path": ""
      },
      "engine": {
        "field_configs": [],
        "data_sources": []
      },
      "proxy": {
        "auth_headers": {},
        "request_headers": null
      },
      "subgraph": {
        "sdl": ""
      },
      "supergraph": {
        "subgraphs": [],
        "merged_sdl": "",
        "global_headers": {},
        "disable_query_batching": false
      }
    },
    "tags_disabled": true,
    "tags": [],
    "is_oas": true,
    "scopes": {
      "jwt": {},
      "oidc": {}
    },
    "analytics_plugin": {},
    "external_oauth": {
      "enabled": false,
      "providers": []
    }
  },
  "oas": {
    "components": {
      "requestBodies": {
        "Pet": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "description": "Pet object that needs to be added to the store",
          "required": true
        },
        "UserArray": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/User"
                },
                "type": "array"
              }
            }
          },
          "description": "List of user object",
          "required": true
        }
      },
      "schemas": {
        "ApiResponse": {
          "properties": {
            "code": {
              "format": "int32",
              "type": "integer"
            },
            "message": {
              "type": "string"
            },
            "type": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "Category": {
          "properties": {
            "id": {
              "format": "int64",
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object",
          "xml": {
            "name": "Category"
          }
        },
        "Order": {
          "properties": {
            "complete": {
              "default": false,
              "type": "boolean"
            },
            "id": {
              "format": "int64",
              "type": "integer"
            },
            "petId": {
              "format": "int64",
              "type": "integer"
            },
            "quantity": {
              "format": "int32",
              "type": "integer"
            },
            "shipDate": {
              "format": "date-time",
              "type": "string"
            },
            "status": {
              "description": "Order Status",
              "enum": [
                "placed",
                "approved",
                "delivered"
              ],
              "type": "string"
            }
          },
          "type": "object",
          "xml": {
            "name": "Order"
          }
        },
        "Pet": {
          "properties": {
            "category": {
              "$ref": "#/components/schemas/Category"
            },
            "id": {
              "format": "int64",
              "type": "integer"
            },
            "name": {
              "example": "doggie",
              "type": "string"
            },
            "photoUrls": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "xml": {
                "name": "photoUrl",
                "wrapped": true
              }
            },
            "status": {
              "description": "pet status in the store",
              "enum": [
                "available",
                "pending",
                "sold"
              ],
              "type": "string"
            },
            "tags": {
              "items": {
                "$ref": "#/components/schemas/Tag"
              },
              "type": "array",
              "xml": {
                "name": "tag",
                "wrapped": true
              }
            }
          },
          "required": [
            "name",
            "photoUrls"
          ],
          "type": "object",
          "xml": {
            "name": "Pet"
          }
        },
        "Tag": {
          "properties": {
            "id": {
              "format": "int64",
              "type": "integer"
            },
            "name": {
              "type": "string"
            }
          },
          "type": "object",
          "xml": {
            "name": "Tag"
          }
        },
        "User": {
          "properties": {
            "email": {
              "type": "string"
            },
            "firstName": {
              "type": "string"
            },
            "id": {
              "format": "int64",
              "type": "integer"
            },
            "lastName": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "phone": {
              "type": "string"
            },
            "userStatus": {
              "description": "User Status",
              "format": "int32",
              "type": "integer"
            },
            "username": {
              "type": "string"
            }
          },
          "type": "object",
          "xml": {
            "name": "User"
          }
        }
      },
      "securitySchemes": {
        "api_key": {
          "in": "header",
          "name": "api_key",
          "type": "apiKey"
        },
        "petstore_auth": {
          "flows": {
            "implicit": {
              "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
              "scopes": {
                "read:pets": "read your pets",
                "write:pets": "modify pets in your account"
              }
            }
          },
          "type": "oauth2"
        }
      }
    },
    "externalDocs": {
      "description": "Find out more about Swagger",
      "url": "http://swagger.io"
    },
    "info": {
      "contact": {
        "email": "apiteam@swagger.io"
      },
      "description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.",
      "license": {
        "name": "Apache 2.0",
        "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "termsOfService": "http://swagger.io/terms/",
      "title": "Swagger Petstore",
      "version": "1.0.0"
    },
    "openapi": "3.0.0",
    "paths": {
      "/pet": {
        "post": {
          "operationId": "addPet",
          "requestBody": {
            "$ref": "#/components/requestBodies/Pet"
          },
          "responses": {
            "405": {
              "description": "Invalid input"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "summary": "Add a new pet to the store",
          "tags": [
            "pet"
          ]
        },
        "put": {
          "operationId": "updatePet",
          "requestBody": {
            "$ref": "#/components/requestBodies/Pet"
          },
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Pet not found"
            },
            "405": {
              "description": "Validation exception"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "summary": "Update an existing pet",
          "tags": [
            "pet"
          ]
        }
      },
      "/pet/findByStatus": {
        "get": {
          "description": "Multiple status values can be provided with comma separated strings",
          "operationId": "findPetsByStatus",
          "parameters": [
            {
              "description": "Status values that need to be considered for filter",
              "explode": true,
              "in": "query",
              "name": "status",
              "required": true,
              "schema": {
                "items": {
                  "default": "available",
                  "enum": [
                    "available",
                    "pending",
                    "sold"
                  ],
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/Pet"
                    },
                    "type": "array"
                  }
                },
                "application/xml": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/Pet"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "successful operation"
            },
            "400": {
              "description": "Invalid status value"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "summary": "Finds Pets by status",
          "tags": [
            "pet"
          ]
        }
      },
      "/pet/findByTags": {
        "get": {
          "deprecated": true,
          "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
          "operationId": "findPetsByTags",
          "parameters": [
            {
              "description": "Tags to filter by",
              "explode": true,
              "in": "query",
              "name": "tags",
              "required": true,
              "schema": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/Pet"
                    },
                    "type": "array"
                  }
                },
                "application/xml": {
                  "schema": {
                    "items": {
                      "$ref": "#/components/schemas/Pet"
                    },
                    "type": "array"
                  }
                }
              },
              "description": "successful operation"
            },
            "400": {
              "description": "Invalid tag value"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "summary": "Finds Pets by tags",
          "tags": [
            "pet"
          ]
        }
      },
      "/pet/{petId}": {
        "delete": {
          "operationId": "deletePet",
          "parameters": [
            {
              "in": "header",
              "name": "api_key",
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "Pet id to delete",
              "in": "path",
              "name": "petId",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Pet not found"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "summary": "Deletes a pet",
          "tags": [
            "pet"
          ]
        },
        "get": {
          "description": "Returns a single pet",
          "operationId": "getPetById",
          "parameters": [
            {
              "description": "ID of pet to return",
              "in": "path",
              "name": "petId",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Pet"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "description": "successful operation"
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Pet not found"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ],
          "summary": "Find pet by ID",
          "tags": [
            "pet"
          ]
        },
        "post": {
          "operationId": "updatePetWithForm",
          "parameters": [
            {
              "description": "ID of pet that needs to be updated",
              "in": "path",
              "name": "petId",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "properties": {
                    "name": {
                      "description": "Updated name of the pet",
                      "type": "string"
                    },
                    "status": {
                      "description": "Updated status of the pet",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              }
            }
          },
          "responses": {
            "405": {
              "description": "Invalid input"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "summary": "Updates a pet in the store with form data",
          "tags": [
            "pet"
          ]
        }
      },
      "/pet/{petId}/uploadImage": {
        "post": {
          "operationId": "uploadFile",
          "parameters": [
            {
              "description": "ID of pet to update",
              "in": "path",
              "name": "petId",
              "required": true,
              "schema": {
                "format": "int64",
                "type": "integer"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/octet-stream": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            }
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ApiResponse"
                  }
                }
              },
              "description": "successful operation"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ],
          "summary": "uploads an image",
          "tags": [
            "pet"
          ]
        }
      },
      "/store/inventory": {
        "get": {
          "description": "Returns a map of status codes to quantities",
          "operationId": "getInventory",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "additionalProperties": {
                      "format": "int32",
                      "type": "integer"
                    },
                    "type": "object"
                  }
                }
              },
              "description": "successful operation"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ],
          "summary": "Returns pet inventories by status",
          "tags": [
            "store"
          ]
        }
      },
      "/store/order": {
        "post": {
          "operationId": "placeOrder",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            },
            "description": "order placed for purchasing the pet",
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Order"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              },
              "description": "successful operation"
            },
            "400": {
              "description": "Invalid Order"
            }
          },
          "summary": "Place an order for a pet",
          "tags": [
            "store"
          ]
        }
      },
      "/store/order/{orderId}": {
        "delete": {
          "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
          "operationId": "deleteOrder",
          "parameters": [
            {
              "description": "ID of the order that needs to be deleted",
              "in": "path",
              "name": "orderId",
              "required": true,
              "schema": {
                "format": "int64",
                "minimum": 1,
                "type": "integer"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Order not found"
            }
          },
          "summary": "Delete purchase order by ID",
          "tags": [
            "store"
          ]
        },
        "get": {
          "description": "For valid response try integer IDs with value \u003e= 1 and \u003c= 10. Other values will generated exceptions",
          "operationId": "getOrderById",
          "parameters": [
            {
              "description": "ID of pet that needs to be fetched",
              "in": "path",
              "name": "orderId",
              "required": true,
              "schema": {
                "format": "int64",
                "maximum": 10,
                "minimum": 1,
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Order"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              },
              "description": "successful operation"
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Order not found"
            }
          },
          "summary": "Find purchase order by ID",
          "tags": [
            "store"
          ]
        }
      },
      "/user": {
        "post": {
          "description": "This can only be done by the logged in user.",
          "operationId": "createUser",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Created user object",
            "required": true
          },
          "responses": {
            "default": {
              "description": "successful operation"
            }
          },
          "summary": "Create user",
          "tags": [
            "user"
          ]
        }
      },
      "/user/createWithArray": {
        "post": {
          "operationId": "createUsersWithArrayInput",
          "requestBody": {
            "$ref": "#/components/requestBodies/UserArray"
          },
          "responses": {
            "default": {
              "description": "successful operation"
            }
          },
          "summary": "Creates list of users with given input array",
          "tags": [
            "user"
          ]
        }
      },
      "/user/createWithList": {
        "post": {
          "operationId": "createUsersWithListInput",
          "requestBody": {
            "$ref": "#/components/requestBodies/UserArray"
          },
          "responses": {
            "default": {
              "description": "successful operation"
            }
          },
          "summary": "Creates list of users with given input array",
          "tags": [
            "user"
          ]
        }
      },
      "/user/login": {
        "get": {
          "operationId": "loginUser",
          "parameters": [
            {
              "description": "The user name for login",
              "in": "query",
              "name": "username",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "description": "The password for login in clear text",
              "in": "query",
              "name": "password",
              "required": true,
              "schema": {
                "format": "password",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "successful operation",
              "headers": {
                "X-Expires-After": {
                  "description": "date in UTC when token expires",
                  "schema": {
                    "format": "date-time",
                    "type": "string"
                  }
                },
                "X-Rate-Limit": {
                  "description": "calls per hour allowed by the user",
                  "schema": {
                    "format": "int32",
                    "type": "integer"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid username/password supplied"
            }
          },
          "summary": "Logs user into the system",
          "tags": [
            "user"
          ]
        }
      },
      "/user/logout": {
        "get": {
          "operationId": "logoutUser",
          "responses": {
            "default": {
              "description": "successful operation"
            }
          },
          "summary": "Logs out current logged in user session",
          "tags": [
            "user"
          ]
        }
      },
      "/user/{username}": {
        "delete": {
          "description": "This can only be done by the logged in user.",
          "operationId": "deleteUser",
          "parameters": [
            {
              "description": "The name that needs to be deleted",
              "in": "path",
              "name": "username",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          },
          "summary": "Delete user",
          "tags": [
            "user"
          ]
        },
        "get": {
          "operationId": "getUserByName",
          "parameters": [
            {
              "description": "The name that needs to be fetched. Use user1 for testing. ",
              "in": "path",
              "name": "username",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              },
              "description": "successful operation"
            },
            "400": {
              "description": "Invalid username supplied"
            },
            "404": {
              "description": "User not found"
            }
          },
          "summary": "Get user by user name",
          "tags": [
            "user"
          ]
        },
        "put": {
          "description": "This can only be done by the logged in user.",
          "operationId": "updateUser",
          "parameters": [
            {
              "description": "name that need to be updated",
              "in": "path",
              "name": "username",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Updated user object",
            "required": true
          },
          "responses": {
            "400": {
              "description": "Invalid user supplied"
            },
            "404": {
              "description": "User not found"
            }
          },
          "summary": "Updated user",
          "tags": [
            "user"
          ]
        }
      }
    },
    "servers": [
      {
        "url": "http://host.docker.internal:8080/swagger_petstore"
      },
      {
        "url": "http://petstore.swagger.io/v2"
      }
    ],
    "tags": [
      {
        "description": "Everything about your Pets",
        "externalDocs": {
          "description": "Find out more",
          "url": "http://swagger.io"
        },
        "name": "pet"
      },
      {
        "description": "Access to Petstore orders",
        "name": "store"
      },
      {
        "description": "Operations about user",
        "externalDocs": {
          "description": "Find out more about our store",
          "url": "http://swagger.io"
        },
        "name": "user"
      }
    ],
    "x-origin": [
      {
        "converter": {
          "url": "https://github.com/mermade/swagger2openapi",
          "version": "2.2.0"
        },
        "format": "swagger",
        "url": "http://petstore.swagger.io/v2/swagger.json",
        "version": "2.0"
      }
    ],
    "x-tyk-api-gateway": {
      "info": {
        "dbId": "649d765cd13bcc0001758316",
        "id": "72a21831f0d74eb651a77cae4a880ab2",
        "name": "Swagger Petstore",
        "orgId": "647f46b4d13bcc0001572f59",
        "state": {
          "active": true
        }
      },
      "server": {
        "listenPath": {
          "strip": true,
          "value": "/swagger_petstore"
        }
      },
      "upstream": {
        "url": "http://petstore.swagger.io/v2"
      }
    }
  },
  "hook_references": [],
  "is_site": false,
  "sort_by": 0,
  "user_group_owners": [],
  "user_owners": []
}